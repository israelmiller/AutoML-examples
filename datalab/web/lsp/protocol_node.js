"use strict";
// tslint:disable:enforce-name-casing
Object.defineProperty(exports, "__esModule", { value: true });
exports.SymbolTag = exports.SymbolKind = exports.DiagnosticSeverity = exports.DiagnosticTag = exports.FailureHandlingKind = exports.ResourceOperationKind = exports.ErrorCode = exports.Method = void 0;
/**
 * JSON-RPC Methods.
 */
var Method;
(function (Method) {
    Method["CancelRequest"] = "$/cancelRequest";
    Method["ClientRegisterCapability"] = "client/registerCapability";
    Method["ColabPipLogChanged"] = "colab/pipLogChanged";
    Method["CompletionItemResolve"] = "completionItem/resolve";
    Method["Initialize"] = "initialize";
    Method["Initialized"] = "initialized";
    Method["TextDocumentCodeAction"] = "textDocument/codeAction";
    Method["TextDocumentCompletion"] = "textDocument/completion";
    // Non-standard extension for inline completions.
    Method["TextDocumentCompose"] = "$/textDocument/compose";
    Method["TextDocumentDefinition"] = "textDocument/definition";
    Method["TextDocumentDidChange"] = "textDocument/didChange";
    Method["TextDocumentDidClose"] = "textDocument/didClose";
    Method["TextDocumentDidOpen"] = "textDocument/didOpen";
    Method["TextDocumentHover"] = "textDocument/hover";
    Method["TextDocumentPublishDiagnostics"] = "textDocument/publishDiagnostics";
    Method["TextDocumentSignatureHelp"] = "textDocument/signatureHelp";
    Method["WindowLogMessage"] = "window/logMessage";
    Method["WorkspaceConfiguration"] = "workspace/configuration";
    Method["WorkspaceDidChangeConfiguration"] = "workspace/didChangeConfiguration";
    Method["WorkspaceDidChangeWatchedFiles"] = "workspace/didChangeWatchedFiles";
})(Method = exports.Method || (exports.Method = {}));
/**
 * https://microsoft.github.io/language-server-protocol/specifications/specification-current/#responseMessage
 */
var ErrorCode;
(function (ErrorCode) {
    // Defined by JSON RPC
    ErrorCode[ErrorCode["ParseError"] = -32700] = "ParseError";
    ErrorCode[ErrorCode["InvalidRequest"] = -32600] = "InvalidRequest";
    ErrorCode[ErrorCode["MethodNotFound"] = -32601] = "MethodNotFound";
    ErrorCode[ErrorCode["InvalidParams"] = -32602] = "InvalidParams";
    ErrorCode[ErrorCode["InternalError"] = -32603] = "InternalError";
    ErrorCode[ErrorCode["ServerErrorStart"] = -32099] = "ServerErrorStart";
    ErrorCode[ErrorCode["ServerErrorEnd"] = -32000] = "ServerErrorEnd";
    ErrorCode[ErrorCode["ServerNotInitialized"] = -32002] = "ServerNotInitialized";
    ErrorCode[ErrorCode["UnknownErrorCode"] = -32001] = "UnknownErrorCode";
    // Defined by the protocol.
    ErrorCode[ErrorCode["RequestCancelled"] = -32800] = "RequestCancelled";
    ErrorCode[ErrorCode["ContentModified"] = -32801] = "ContentModified";
})(ErrorCode = exports.ErrorCode || (exports.ErrorCode = {}));
/**
 * The kind of resource operations supported by the client.
 */
var ResourceOperationKind;
(function (ResourceOperationKind) {
    /**
     * Supports creating new files and folders.
     */
    ResourceOperationKind["CREATE"] = "create";
    /**
     * Supports renaming existing files and folders.
     */
    ResourceOperationKind["RENAME"] = "rename";
    /**
     * Supports deleting existing files and folders.
     */
    ResourceOperationKind["DELETE"] = "delete";
})(ResourceOperationKind = exports.ResourceOperationKind || (exports.ResourceOperationKind = {}));
/**
 * https://microsoft.github.io/language-server-protocol/specifications/specification-current/#workspaceEditClientCapabilities
 */
var FailureHandlingKind;
(function (FailureHandlingKind) {
    /**
     * Applying the workspace change is simply aborted if one of the changes
     * provided fails.
     * All operations executed before the failing operation stay executed.
     */
    FailureHandlingKind["Abort"] = "abort";
    /**
     * All operations are executed transactional. That means they either all
     * succeed or no changes at all are applied to the workspace.
     */
    FailureHandlingKind["Transactional"] = "transactional";
    /**
     * If the workspace edit contains only textual file changes, they are
     * executed transactionally.
     * If resource changes (create, rename or delete file) are part of the
     * change, the failure handling strategy is abort.
     */
    FailureHandlingKind["TextOnlyTransactional"] = "textOnlyTransactional";
    /**
     * The client tries to undo the operations already executed. But there is no
     * guarantee that this is succeeding.
     */
    FailureHandlingKind["Undo"] = "undo";
})(FailureHandlingKind = exports.FailureHandlingKind || (exports.FailureHandlingKind = {}));
/**
 * The diagnostic tags.
 *
 * @since 3.15.0
 */
var DiagnosticTag;
(function (DiagnosticTag) {
    /**
     * Unused or unnecessary code.
     *
     * Clients are allowed to render diagnostics with this tag faded out
     * instead of having an error squiggle.
     */
    DiagnosticTag[DiagnosticTag["Unnecessary"] = 1] = "Unnecessary";
    /**
     * Deprecated or obsolete code.
     *
     * Clients are allowed to rendered diagnostics with this tag strike through.
     */
    DiagnosticTag[DiagnosticTag["Deprecated"] = 2] = "Deprecated";
})(DiagnosticTag = exports.DiagnosticTag || (exports.DiagnosticTag = {}));
/**
 * https://microsoft.github.io/language-server-protocol/specifications/specification-current/#diagnostic
 */
var DiagnosticSeverity;
(function (DiagnosticSeverity) {
    /**
     * Reports an error.
     */
    DiagnosticSeverity[DiagnosticSeverity["Error"] = 1] = "Error";
    /**
     * Reports a warning.
     */
    DiagnosticSeverity[DiagnosticSeverity["Warning"] = 2] = "Warning";
    /**
     * Reports an information.
     */
    DiagnosticSeverity[DiagnosticSeverity["Information"] = 3] = "Information";
    /**
     * Reports a hint.
     */
    DiagnosticSeverity[DiagnosticSeverity["Hint"] = 4] = "Hint";
})(DiagnosticSeverity = exports.DiagnosticSeverity || (exports.DiagnosticSeverity = {}));
/**
 * A symbol kind.
 */
var SymbolKind;
(function (SymbolKind) {
    SymbolKind[SymbolKind["File"] = 1] = "File";
    SymbolKind[SymbolKind["Module"] = 2] = "Module";
    SymbolKind[SymbolKind["Namespace"] = 3] = "Namespace";
    SymbolKind[SymbolKind["Package"] = 4] = "Package";
    SymbolKind[SymbolKind["Class"] = 5] = "Class";
    SymbolKind[SymbolKind["Method"] = 6] = "Method";
    SymbolKind[SymbolKind["Property"] = 7] = "Property";
    SymbolKind[SymbolKind["Field"] = 8] = "Field";
    SymbolKind[SymbolKind["Constructor"] = 9] = "Constructor";
    SymbolKind[SymbolKind["Enum"] = 10] = "Enum";
    SymbolKind[SymbolKind["Interface"] = 11] = "Interface";
    SymbolKind[SymbolKind["Function"] = 12] = "Function";
    SymbolKind[SymbolKind["Variable"] = 13] = "Variable";
    SymbolKind[SymbolKind["Constant"] = 14] = "Constant";
    SymbolKind[SymbolKind["String"] = 15] = "String";
    SymbolKind[SymbolKind["Number"] = 16] = "Number";
    SymbolKind[SymbolKind["Boolean"] = 17] = "Boolean";
    SymbolKind[SymbolKind["Array"] = 18] = "Array";
    SymbolKind[SymbolKind["Object"] = 19] = "Object";
    SymbolKind[SymbolKind["Key"] = 20] = "Key";
    SymbolKind[SymbolKind["Null"] = 21] = "Null";
    SymbolKind[SymbolKind["EnumMember"] = 22] = "EnumMember";
    SymbolKind[SymbolKind["Struct"] = 23] = "Struct";
    SymbolKind[SymbolKind["Event"] = 24] = "Event";
    SymbolKind[SymbolKind["Operator"] = 25] = "Operator";
    SymbolKind[SymbolKind["TypeParameter"] = 26] = "TypeParameter";
})(SymbolKind = exports.SymbolKind || (exports.SymbolKind = {}));
/**
 * Symbol tags are extra annotations that tweak the rendering of a symbol.
 *
 * @since 3.16
 */
var SymbolTag;
(function (SymbolTag) {
    /**
     * Render a symbol as obsolete, usually using a strike-out.
     */
    SymbolTag[SymbolTag["Deprecated"] = 1] = "Deprecated";
})(SymbolTag = exports.SymbolTag || (exports.SymbolTag = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvdG9jb2xfbm9kZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2dlbmZpbGVzL3RoaXJkX3BhcnR5L2NvbGFiL3NvdXJjZXMvbHNwL3Byb3RvY29sX25vZGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLHFDQUFxQzs7O0FBRXJDOztHQUVHO0FBQ0gsSUFBWSxNQXNCWDtBQXRCRCxXQUFZLE1BQU07SUFDaEIsMkNBQWlDLENBQUE7SUFDakMsZ0VBQXNELENBQUE7SUFDdEQsb0RBQTBDLENBQUE7SUFDMUMsMERBQWdELENBQUE7SUFDaEQsbUNBQXlCLENBQUE7SUFDekIscUNBQTJCLENBQUE7SUFDM0IsNERBQWtELENBQUE7SUFDbEQsNERBQWtELENBQUE7SUFDbEQsaURBQWlEO0lBQ2pELHdEQUE4QyxDQUFBO0lBQzlDLDREQUFrRCxDQUFBO0lBQ2xELDBEQUFnRCxDQUFBO0lBQ2hELHdEQUE4QyxDQUFBO0lBQzlDLHNEQUE0QyxDQUFBO0lBQzVDLGtEQUF3QyxDQUFBO0lBQ3hDLDRFQUFrRSxDQUFBO0lBQ2xFLGtFQUF3RCxDQUFBO0lBQ3hELGdEQUFzQyxDQUFBO0lBQ3RDLDREQUFrRCxDQUFBO0lBQ2xELDhFQUFvRSxDQUFBO0lBQ3BFLDRFQUFrRSxDQUFBO0FBQ3BFLENBQUMsRUF0QlcsTUFBTSxHQUFOLGNBQU0sS0FBTixjQUFNLFFBc0JqQjtBQXFFRDs7R0FFRztBQUNILElBQVksU0FlWDtBQWZELFdBQVksU0FBUztJQUNuQixzQkFBc0I7SUFDdEIsMERBQW1CLENBQUE7SUFDbkIsa0VBQXVCLENBQUE7SUFDdkIsa0VBQXVCLENBQUE7SUFDdkIsZ0VBQXNCLENBQUE7SUFDdEIsZ0VBQXNCLENBQUE7SUFDdEIsc0VBQXlCLENBQUE7SUFDekIsa0VBQXVCLENBQUE7SUFDdkIsOEVBQTZCLENBQUE7SUFDN0Isc0VBQXlCLENBQUE7SUFFekIsMkJBQTJCO0lBQzNCLHNFQUF5QixDQUFBO0lBQ3pCLG9FQUF3QixDQUFBO0FBQzFCLENBQUMsRUFmVyxTQUFTLEdBQVQsaUJBQVMsS0FBVCxpQkFBUyxRQWVwQjtBQWdMRDs7R0FFRztBQUNILElBQVkscUJBYVg7QUFiRCxXQUFZLHFCQUFxQjtJQUMvQjs7T0FFRztJQUNILDBDQUFpQixDQUFBO0lBQ2pCOztPQUVHO0lBQ0gsMENBQWlCLENBQUE7SUFDakI7O09BRUc7SUFDSCwwQ0FBaUIsQ0FBQTtBQUNuQixDQUFDLEVBYlcscUJBQXFCLEdBQXJCLDZCQUFxQixLQUFyQiw2QkFBcUIsUUFhaEM7QUFFRDs7R0FFRztBQUNILElBQVksbUJBMkJYO0FBM0JELFdBQVksbUJBQW1CO0lBQzdCOzs7O09BSUc7SUFDSCxzQ0FBZSxDQUFBO0lBRWY7OztPQUdHO0lBQ0gsc0RBQStCLENBQUE7SUFFL0I7Ozs7O09BS0c7SUFDSCxzRUFBK0MsQ0FBQTtJQUUvQzs7O09BR0c7SUFDSCxvQ0FBYSxDQUFBO0FBQ2YsQ0FBQyxFQTNCVyxtQkFBbUIsR0FBbkIsMkJBQW1CLEtBQW5CLDJCQUFtQixRQTJCOUI7QUF3RUQ7Ozs7R0FJRztBQUNILElBQVksYUFjWDtBQWRELFdBQVksYUFBYTtJQUN2Qjs7Ozs7T0FLRztJQUNILCtEQUFlLENBQUE7SUFDZjs7OztPQUlHO0lBQ0gsNkRBQWMsQ0FBQTtBQUNoQixDQUFDLEVBZFcsYUFBYSxHQUFiLHFCQUFhLEtBQWIscUJBQWEsUUFjeEI7QUErQ0Q7O0dBRUc7QUFDSCxJQUFZLGtCQWlCWDtBQWpCRCxXQUFZLGtCQUFrQjtJQUM1Qjs7T0FFRztJQUNILDZEQUFTLENBQUE7SUFDVDs7T0FFRztJQUNILGlFQUFXLENBQUE7SUFDWDs7T0FFRztJQUNILHlFQUFlLENBQUE7SUFDZjs7T0FFRztJQUNILDJEQUFRLENBQUE7QUFDVixDQUFDLEVBakJXLGtCQUFrQixHQUFsQiwwQkFBa0IsS0FBbEIsMEJBQWtCLFFBaUI3QjtBQW1CRDs7R0FFRztBQUNILElBQVksVUEyQlg7QUEzQkQsV0FBWSxVQUFVO0lBQ3BCLDJDQUFRLENBQUE7SUFDUiwrQ0FBVSxDQUFBO0lBQ1YscURBQWEsQ0FBQTtJQUNiLGlEQUFXLENBQUE7SUFDWCw2Q0FBUyxDQUFBO0lBQ1QsK0NBQVUsQ0FBQTtJQUNWLG1EQUFZLENBQUE7SUFDWiw2Q0FBUyxDQUFBO0lBQ1QseURBQWUsQ0FBQTtJQUNmLDRDQUFTLENBQUE7SUFDVCxzREFBYyxDQUFBO0lBQ2Qsb0RBQWEsQ0FBQTtJQUNiLG9EQUFhLENBQUE7SUFDYixvREFBYSxDQUFBO0lBQ2IsZ0RBQVcsQ0FBQTtJQUNYLGdEQUFXLENBQUE7SUFDWCxrREFBWSxDQUFBO0lBQ1osOENBQVUsQ0FBQTtJQUNWLGdEQUFXLENBQUE7SUFDWCwwQ0FBUSxDQUFBO0lBQ1IsNENBQVMsQ0FBQTtJQUNULHdEQUFlLENBQUE7SUFDZixnREFBVyxDQUFBO0lBQ1gsOENBQVUsQ0FBQTtJQUNWLG9EQUFhLENBQUE7SUFDYiw4REFBa0IsQ0FBQTtBQUNwQixDQUFDLEVBM0JXLFVBQVUsR0FBVixrQkFBVSxLQUFWLGtCQUFVLFFBMkJyQjtBQUVEOzs7O0dBSUc7QUFDSCxJQUFZLFNBTVg7QUFORCxXQUFZLFNBQVM7SUFFbkI7O09BRUc7SUFDSCxxREFBYyxDQUFBO0FBQ2hCLENBQUMsRUFOVyxTQUFTLEdBQVQsaUJBQVMsS0FBVCxpQkFBUyxRQU1wQiIsInNvdXJjZXNDb250ZW50IjpbIi8vIHRzbGludDpkaXNhYmxlOmVuZm9yY2UtbmFtZS1jYXNpbmdcblxuLyoqXG4gKiBKU09OLVJQQyBNZXRob2RzLlxuICovXG5leHBvcnQgZW51bSBNZXRob2Qge1xuICBDYW5jZWxSZXF1ZXN0ID0gJyQvY2FuY2VsUmVxdWVzdCcsXG4gIENsaWVudFJlZ2lzdGVyQ2FwYWJpbGl0eSA9ICdjbGllbnQvcmVnaXN0ZXJDYXBhYmlsaXR5JyxcbiAgQ29sYWJQaXBMb2dDaGFuZ2VkID0gJ2NvbGFiL3BpcExvZ0NoYW5nZWQnLFxuICBDb21wbGV0aW9uSXRlbVJlc29sdmUgPSAnY29tcGxldGlvbkl0ZW0vcmVzb2x2ZScsXG4gIEluaXRpYWxpemUgPSAnaW5pdGlhbGl6ZScsXG4gIEluaXRpYWxpemVkID0gJ2luaXRpYWxpemVkJyxcbiAgVGV4dERvY3VtZW50Q29kZUFjdGlvbiA9ICd0ZXh0RG9jdW1lbnQvY29kZUFjdGlvbicsXG4gIFRleHREb2N1bWVudENvbXBsZXRpb24gPSAndGV4dERvY3VtZW50L2NvbXBsZXRpb24nLFxuICAvLyBOb24tc3RhbmRhcmQgZXh0ZW5zaW9uIGZvciBpbmxpbmUgY29tcGxldGlvbnMuXG4gIFRleHREb2N1bWVudENvbXBvc2UgPSAnJC90ZXh0RG9jdW1lbnQvY29tcG9zZScsXG4gIFRleHREb2N1bWVudERlZmluaXRpb24gPSAndGV4dERvY3VtZW50L2RlZmluaXRpb24nLFxuICBUZXh0RG9jdW1lbnREaWRDaGFuZ2UgPSAndGV4dERvY3VtZW50L2RpZENoYW5nZScsXG4gIFRleHREb2N1bWVudERpZENsb3NlID0gJ3RleHREb2N1bWVudC9kaWRDbG9zZScsXG4gIFRleHREb2N1bWVudERpZE9wZW4gPSAndGV4dERvY3VtZW50L2RpZE9wZW4nLFxuICBUZXh0RG9jdW1lbnRIb3ZlciA9ICd0ZXh0RG9jdW1lbnQvaG92ZXInLFxuICBUZXh0RG9jdW1lbnRQdWJsaXNoRGlhZ25vc3RpY3MgPSAndGV4dERvY3VtZW50L3B1Ymxpc2hEaWFnbm9zdGljcycsXG4gIFRleHREb2N1bWVudFNpZ25hdHVyZUhlbHAgPSAndGV4dERvY3VtZW50L3NpZ25hdHVyZUhlbHAnLFxuICBXaW5kb3dMb2dNZXNzYWdlID0gJ3dpbmRvdy9sb2dNZXNzYWdlJyxcbiAgV29ya3NwYWNlQ29uZmlndXJhdGlvbiA9ICd3b3Jrc3BhY2UvY29uZmlndXJhdGlvbicsXG4gIFdvcmtzcGFjZURpZENoYW5nZUNvbmZpZ3VyYXRpb24gPSAnd29ya3NwYWNlL2RpZENoYW5nZUNvbmZpZ3VyYXRpb24nLFxuICBXb3Jrc3BhY2VEaWRDaGFuZ2VXYXRjaGVkRmlsZXMgPSAnd29ya3NwYWNlL2RpZENoYW5nZVdhdGNoZWRGaWxlcycsXG59XG5cbi8qKiBCYXNlIEpTT04tUlBDIDIuMCB0eXBlLiAqL1xuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIE1lc3NhZ2Uge1xuICBqc29ucnBjOiBcIjIuMFwiO1xufVxuXG4vKipcbiAqIEpTT04tUlBDIDIuMCByZXF1ZXN0LlxuICogaHR0cHM6Ly9taWNyb3NvZnQuZ2l0aHViLmlvL2xhbmd1YWdlLXNlcnZlci1wcm90b2NvbC9zcGVjaWZpY2F0aW9ucy9zcGVjaWZpY2F0aW9uLWN1cnJlbnQvI3JlcXVlc3RNZXNzYWdlXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBSZXF1ZXN0TWVzc2FnZTxUPiBleHRlbmRzIE1lc3NhZ2Uge1xuICAvKipcbiAgICogVGhlIHJlcXVlc3QgaWQuXG4gICAqL1xuICBpZDogbnVtYmVyfHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSBtZXRob2QgdG8gYmUgaW52b2tlZC5cbiAgICovXG4gIG1ldGhvZDogTWV0aG9kO1xuICAvKipcbiAgICogVGhlIG1ldGhvZCdzIHBhcmFtcy5cbiAgICovXG4gIHBhcmFtczogVDtcbn1cblxuLyoqXG4gKiBKU09OLVJQQyAyLjAgcmVzcG9uc2UuXG4gKiBodHRwczovL21pY3Jvc29mdC5naXRodWIuaW8vbGFuZ3VhZ2Utc2VydmVyLXByb3RvY29sL3NwZWNpZmljYXRpb25zL3NwZWNpZmljYXRpb24tY3VycmVudC8jcmVzcG9uc2VNZXNzYWdlXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBSZXNwb25zZU1lc3NhZ2UgZXh0ZW5kcyBNZXNzYWdlIHtcbiAgLyoqXG4gICAqIFRoZSByZXF1ZXN0IGlkLlxuICAgKi9cbiAgaWQ6IG51bWJlciB8IHN0cmluZyB8IG51bGw7XG5cbiAgLyoqXG4gICAqIFRoZSByZXN1bHQgb2YgYSByZXF1ZXN0LiBUaGlzIG1lbWJlciBpcyBSRVFVSVJFRCBvbiBzdWNjZXNzLlxuICAgKiBUaGlzIG1lbWJlciBNVVNUIE5PVCBleGlzdCBpZiB0aGVyZSB3YXMgYW4gZXJyb3IgaW52b2tpbmcgdGhlIG1ldGhvZC5cbiAgICovXG4gIHJlc3VsdD86IHN0cmluZyB8IG51bWJlciB8IGJvb2xlYW4gfCBvYmplY3QgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBUaGUgZXJyb3Igb2JqZWN0IGluIGNhc2UgYSByZXF1ZXN0IGZhaWxzLlxuICAgKi9cbiAgZXJyb3I/OiBSZXNwb25zZUVycm9yO1xufVxuXG4vKipcbiAqIGh0dHBzOi8vbWljcm9zb2Z0LmdpdGh1Yi5pby9sYW5ndWFnZS1zZXJ2ZXItcHJvdG9jb2wvc3BlY2lmaWNhdGlvbnMvc3BlY2lmaWNhdGlvbi1jdXJyZW50LyNyZXNwb25zZU1lc3NhZ2VcbiAqL1xuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIFJlc3BvbnNlRXJyb3Ige1xuICAvKipcbiAgICogQSBudW1iZXIgaW5kaWNhdGluZyB0aGUgZXJyb3IgdHlwZSB0aGF0IG9jY3VycmVkLlxuICAgKi9cbiAgY29kZTogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBBIHN0cmluZyBwcm92aWRpbmcgYSBzaG9ydCBkZXNjcmlwdGlvbiBvZiB0aGUgZXJyb3IuXG4gICAqL1xuICBtZXNzYWdlOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEEgcHJpbWl0aXZlIG9yIHN0cnVjdHVyZWQgdmFsdWUgdGhhdCBjb250YWlucyBhZGRpdGlvbmFsXG4gICAqIGluZm9ybWF0aW9uIGFib3V0IHRoZSBlcnJvci4gQ2FuIGJlIG9taXR0ZWQuXG4gICAqL1xuICBkYXRhPzogc3RyaW5nIHwgbnVtYmVyIHwgYm9vbGVhbiB8IHVua25vd25bXSB8IG9iamVjdCB8IG51bGw7XG59XG5cbi8qKlxuICogaHR0cHM6Ly9taWNyb3NvZnQuZ2l0aHViLmlvL2xhbmd1YWdlLXNlcnZlci1wcm90b2NvbC9zcGVjaWZpY2F0aW9ucy9zcGVjaWZpY2F0aW9uLWN1cnJlbnQvI3Jlc3BvbnNlTWVzc2FnZVxuICovXG5leHBvcnQgZW51bSBFcnJvckNvZGUge1xuICAvLyBEZWZpbmVkIGJ5IEpTT04gUlBDXG4gIFBhcnNlRXJyb3IgPSAtMzI3MDAsXG4gIEludmFsaWRSZXF1ZXN0ID0gLTMyNjAwLFxuICBNZXRob2ROb3RGb3VuZCA9IC0zMjYwMSxcbiAgSW52YWxpZFBhcmFtcyA9IC0zMjYwMixcbiAgSW50ZXJuYWxFcnJvciA9IC0zMjYwMyxcbiAgU2VydmVyRXJyb3JTdGFydCA9IC0zMjA5OSxcbiAgU2VydmVyRXJyb3JFbmQgPSAtMzIwMDAsXG4gIFNlcnZlck5vdEluaXRpYWxpemVkID0gLTMyMDAyLFxuICBVbmtub3duRXJyb3JDb2RlID0gLTMyMDAxLFxuXG4gIC8vIERlZmluZWQgYnkgdGhlIHByb3RvY29sLlxuICBSZXF1ZXN0Q2FuY2VsbGVkID0gLTMyODAwLFxuICBDb250ZW50TW9kaWZpZWQgPSAtMzI4MDEsXG59XG5cbi8qKlxuICogaHR0cHM6Ly9taWNyb3NvZnQuZ2l0aHViLmlvL2xhbmd1YWdlLXNlcnZlci1wcm90b2NvbC9zcGVjaWZpY2F0aW9ucy9zcGVjaWZpY2F0aW9uLWN1cnJlbnQvI25vdGlmaWNhdGlvbk1lc3NhZ2VcbiAqL1xuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIE5vdGlmaWNhdGlvbk1lc3NhZ2U8VD4gZXh0ZW5kcyBNZXNzYWdlIHtcbiAgLyoqXG4gICAqIFRoZSBtZXRob2QgdG8gYmUgaW52b2tlZC5cbiAgICovXG4gIG1ldGhvZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgbm90aWZpY2F0aW9uJ3MgcGFyYW1zLlxuICAgKi9cbiAgcGFyYW1zOiBUO1xufVxuXG4vKipcbiAqIGh0dHBzOi8vbWljcm9zb2Z0LmdpdGh1Yi5pby9sYW5ndWFnZS1zZXJ2ZXItcHJvdG9jb2wvc3BlY2lmaWNhdGlvbnMvc3BlY2lmaWNhdGlvbi1jdXJyZW50LyNjYW5jZWxSZXF1ZXN0XG4gKi9cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBDYW5jZWxQYXJhbXMge1xuICAvKipcbiAgICogVGhlIHJlcXVlc3QgaWQgdG8gY2FuY2VsLlxuICAgKi9cbiAgaWQ6IG51bWJlciB8IHN0cmluZztcbn1cblxudHlwZSBQcm9ncmVzc1Rva2VuID0gbnVtYmVyIHwgc3RyaW5nO1xuLyoqXG4gKiBodHRwczovL21pY3Jvc29mdC5naXRodWIuaW8vbGFuZ3VhZ2Utc2VydmVyLXByb3RvY29sL3NwZWNpZmljYXRpb25zL3NwZWNpZmljYXRpb24tY3VycmVudC8jcHJvZ3Jlc3NcbiAqL1xuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIFByb2dyZXNzUGFyYW1zPFQ+IHtcbiAgLyoqXG4gICAqIFRoZSBwcm9ncmVzcyB0b2tlbiBwcm92aWRlZCBieSB0aGUgY2xpZW50IG9yIHNlcnZlci5cbiAgICovXG4gIHRva2VuOiBQcm9ncmVzc1Rva2VuO1xuXG4gIC8qKlxuICAgKiBUaGUgcHJvZ3Jlc3MgZGF0YS5cbiAgICovXG4gIHZhbHVlOiBUO1xufVxuXG4vKipcbiAqIGh0dHBzOi8vbWljcm9zb2Z0LmdpdGh1Yi5pby9sYW5ndWFnZS1zZXJ2ZXItcHJvdG9jb2wvc3BlY2lmaWNhdGlvbnMvc3BlY2lmaWNhdGlvbi1jdXJyZW50LyN1cmlcbiAqL1xuZXhwb3J0IHR5cGUgRG9jdW1lbnRVcmkgPSBzdHJpbmc7XG5cbi8qKlxuICogUG9zaXRpb24gaW4gYSB0ZXh0IGRvY3VtZW50IGV4cHJlc3NlZCBhcyB6ZXJvLWJhc2VkIGxpbmUgYW5kIHplcm8tYmFzZWRcbiAqIGNoYXJhY3RlciBvZmZzZXQuIEEgcG9zaXRpb24gaXMgYmV0d2VlbiB0d28gY2hhcmFjdGVycyBsaWtlIGFuIOKAmGluc2VydOKAmVxuICogY3Vyc29yIGluIGEgZWRpdG9yLiBTcGVjaWFsIHZhbHVlcyBsaWtlIGZvciBleGFtcGxlIC0xIHRvIGRlbm90ZSB0aGUgZW5kIG9mXG4gKiBhIGxpbmUgYXJlIG5vdCBzdXBwb3J0ZWQuXG4gKiBodHRwczovL21pY3Jvc29mdC5naXRodWIuaW8vbGFuZ3VhZ2Utc2VydmVyLXByb3RvY29sL3NwZWNpZmljYXRpb25zL3NwZWNpZmljYXRpb24tY3VycmVudC8jcG9zaXRpb25cbiAqL1xuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIFBvc2l0aW9uIHtcbiAgLyoqXG4gICAqIExpbmUgcG9zaXRpb24gaW4gYSBkb2N1bWVudCAoemVyby1iYXNlZCkuXG4gICAqL1xuICBsaW5lOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIENoYXJhY3RlciBvZmZzZXQgb24gYSBsaW5lIGluIGEgZG9jdW1lbnQgKHplcm8tYmFzZWQpLiBBc3N1bWluZyB0aGF0IHRoZVxuICAgKiBsaW5lIGlzIHJlcHJlc2VudGVkIGFzIGEgc3RyaW5nLCB0aGUgYGNoYXJhY3RlcmAgdmFsdWUgcmVwcmVzZW50cyB0aGUgZ2FwXG4gICAqIGJldHdlZW4gdGhlIGBjaGFyYWN0ZXJgIGFuZCBgY2hhcmFjdGVyICsgMWAuXG4gICAqXG4gICAqIElmIHRoZSBjaGFyYWN0ZXIgdmFsdWUgaXMgZ3JlYXRlciB0aGFuIHRoZSBsaW5lIGxlbmd0aCBpdCBkZWZhdWx0cyBiYWNrXG4gICAqIHRvIHRoZSBsaW5lIGxlbmd0aC5cbiAgICovXG4gIGNoYXJhY3RlcjogbnVtYmVyO1xufVxuXG4vKipcbiAqIGh0dHBzOi8vbWljcm9zb2Z0LmdpdGh1Yi5pby9sYW5ndWFnZS1zZXJ2ZXItcHJvdG9jb2wvc3BlY2lmaWNhdGlvbnMvc3BlY2lmaWNhdGlvbi1jdXJyZW50LyNyYW5nZVxuICovXG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgUmFuZ2Uge1xuICAvKipcbiAgICogVGhlIHJhbmdlJ3Mgc3RhcnQgcG9zaXRpb24uXG4gICAqL1xuICBzdGFydDogUG9zaXRpb247XG5cbiAgLyoqXG4gICAqIFRoZSByYW5nZSdzIGVuZCBwb3NpdGlvbi5cbiAgICovXG4gIGVuZDogUG9zaXRpb247XG59XG5cbi8qKlxuICogaHR0cHM6Ly9taWNyb3NvZnQuZ2l0aHViLmlvL2xhbmd1YWdlLXNlcnZlci1wcm90b2NvbC9zcGVjaWZpY2F0aW9ucy9zcGVjaWZpY2F0aW9uLWN1cnJlbnQvI2xvY2F0aW9uXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBMb2NhdGlvbiB7XG4gIHVyaTogRG9jdW1lbnRVcmk7XG4gIHJhbmdlOiBSYW5nZTtcbn1cblxuLyoqXG4gKiBodHRwczovL21pY3Jvc29mdC5naXRodWIuaW8vbGFuZ3VhZ2Utc2VydmVyLXByb3RvY29sL3NwZWNpZmljYXRpb25zL3NwZWNpZmljYXRpb24tY3VycmVudC8jbG9jYXRpb25MaW5rXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBMb2NhdGlvbkxpbmsge1xuXG4gIC8qKlxuICAgKiBTcGFuIG9mIHRoZSBvcmlnaW4gb2YgdGhpcyBsaW5rLlxuICAgKlxuICAgKiBVc2VkIGFzIHRoZSB1bmRlcmxpbmVkIHNwYW4gZm9yIG1vdXNlIGludGVyYWN0aW9uLlxuICAgKiBEZWZhdWx0cyB0byB0aGUgd29yZCByYW5nZSBhdCB0aGUgbW91c2UgcG9zaXRpb24uXG4gICAqL1xuICBvcmlnaW5TZWxlY3Rpb25SYW5nZT86IFJhbmdlO1xuXG4gIC8qKlxuICAgKiBUaGUgdGFyZ2V0IHJlc291cmNlIGlkZW50aWZpZXIgb2YgdGhpcyBsaW5rLlxuICAgKi9cbiAgdGFyZ2V0VXJpOiBEb2N1bWVudFVyaTtcblxuICAvKipcbiAgICogVGhlIGZ1bGwgdGFyZ2V0IHJhbmdlIG9mIHRoaXMgbGluay5cbiAgICogRm9yIGV4YW1wbGUsIGlmIHRoZSB0YXJnZXQgaXMgYSBzeW1ib2wsIHRoZW4gdGFyZ2V0IHJhbmdlIGlzIHRoZSByYW5nZVxuICAgKiBlbmNsb3NpbmcgdGhpcyBzeW1ib2wgbm90IGluY2x1ZGluZyBsZWFkaW5nL3RyYWlsaW5nIHdoaXRlc3BhY2UgYnV0XG4gICAqIGV2ZXJ5dGhpbmcgZWxzZSBsaWtlIGNvbW1lbnRzLlxuICAgKiBUaGlzIGluZm9ybWF0aW9uIGlzIHR5cGljYWxseSB1c2VkIHRvIGhpZ2hsaWdodCB0aGUgcmFuZ2UgaW4gdGhlIGVkaXRvci5cbiAgICovXG4gIHRhcmdldFJhbmdlOiBSYW5nZTtcblxuICAvKipcbiAgICogVGhlIHJhbmdlIHRoYXQgc2hvdWxkIGJlIHNlbGVjdGVkIGFuZCByZXZlYWxlZCB3aGVuIHRoaXMgbGluayBpcyBiZWluZ1xuICAgKiBmb2xsb3dlZCwgZm9yIGV4YW1wbGUsIHRoZSBuYW1lIG9mIGEgZnVuY3Rpb24uXG4gICAqIE11c3QgYmUgY29udGFpbmVkIGJ5IHRoZSBgdGFyZ2V0UmFuZ2VgLlxuICAgKiBTZWUgYWxzbyBgRG9jdW1lbnRTeW1ib2wjcmFuZ2VgXG4gICAqL1xuICB0YXJnZXRTZWxlY3Rpb25SYW5nZTogUmFuZ2U7XG59XG5cbi8qKlxuICogaHR0cHM6Ly9taWNyb3NvZnQuZ2l0aHViLmlvL2xhbmd1YWdlLXNlcnZlci1wcm90b2NvbC9zcGVjaWZpY2F0aW9ucy9zcGVjaWZpY2F0aW9uLWN1cnJlbnQvI2NvbW1hbmRcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBDb21tYW5kIHtcbiAgLyoqXG4gICAqIFRpdGxlIG9mIHRoZSBjb21tYW5kLCBsaWtlIGBzYXZlYC5cbiAgICovXG4gIHRpdGxlOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaGUgaWRlbnRpZmllciBvZiB0aGUgYWN0dWFsIGNvbW1hbmQgaGFuZGxlci5cbiAgICovXG4gIGNvbW1hbmQ6IHN0cmluZztcbiAgLyoqXG4gICAqIEFyZ3VtZW50cyB0aGF0IHRoZSBjb21tYW5kIGhhbmRsZXIgc2hvdWxkIGJlXG4gICAqIGludm9rZWQgd2l0aC5cbiAgICovXG4gIGFyZ3VtZW50cz86IHVua25vd25bXTtcbn1cblxuLyoqXG4gKiBodHRwczovL21pY3Jvc29mdC5naXRodWIuaW8vbGFuZ3VhZ2Utc2VydmVyLXByb3RvY29sL3NwZWNpZmljYXRpb25zL3NwZWNpZmljYXRpb24tY3VycmVudC8jd29ya3NwYWNlRWRpdENsaWVudENhcGFiaWxpdGllc1xuICovXG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgV29ya3NwYWNlRWRpdENsaWVudENhcGFiaWxpdGllcyB7XG4gIC8qKlxuICAgKiBUaGUgY2xpZW50IHN1cHBvcnRzIHZlcnNpb25lZCBkb2N1bWVudCBjaGFuZ2VzIGluIGBXb3Jrc3BhY2VFZGl0YHNcbiAgICovXG4gIGRvY3VtZW50Q2hhbmdlcz86IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIFRoZSByZXNvdXJjZSBvcGVyYXRpb25zIHRoZSBjbGllbnQgc3VwcG9ydHMuIENsaWVudHMgc2hvdWxkIGF0IGxlYXN0XG4gICAqIHN1cHBvcnQgJ2NyZWF0ZScsICdyZW5hbWUnIGFuZCAnZGVsZXRlJyBmaWxlcyBhbmQgZm9sZGVycy5cbiAgICpcbiAgICogQHNpbmNlIDMuMTMuMFxuICAgKi9cbiAgcmVzb3VyY2VPcGVyYXRpb25zPzogUmVzb3VyY2VPcGVyYXRpb25LaW5kW107XG5cbiAgLyoqXG4gICAqIFRoZSBmYWlsdXJlIGhhbmRsaW5nIHN0cmF0ZWd5IG9mIGEgY2xpZW50IGlmIGFwcGx5aW5nIHRoZSB3b3Jrc3BhY2UgZWRpdFxuICAgKiBmYWlscy5cbiAgICpcbiAgICogQHNpbmNlIDMuMTMuMFxuICAgKi9cbiAgZmFpbHVyZUhhbmRsaW5nPzogRmFpbHVyZUhhbmRsaW5nS2luZDtcbn1cblxuLyoqXG4gKiBUaGUga2luZCBvZiByZXNvdXJjZSBvcGVyYXRpb25zIHN1cHBvcnRlZCBieSB0aGUgY2xpZW50LlxuICovXG5leHBvcnQgZW51bSBSZXNvdXJjZU9wZXJhdGlvbktpbmQge1xuICAvKipcbiAgICogU3VwcG9ydHMgY3JlYXRpbmcgbmV3IGZpbGVzIGFuZCBmb2xkZXJzLlxuICAgKi9cbiAgQ1JFQVRFID0gJ2NyZWF0ZScsXG4gIC8qKlxuICAgKiBTdXBwb3J0cyByZW5hbWluZyBleGlzdGluZyBmaWxlcyBhbmQgZm9sZGVycy5cbiAgICovXG4gIFJFTkFNRSA9ICdyZW5hbWUnLFxuICAvKipcbiAgICogU3VwcG9ydHMgZGVsZXRpbmcgZXhpc3RpbmcgZmlsZXMgYW5kIGZvbGRlcnMuXG4gICAqL1xuICBERUxFVEUgPSAnZGVsZXRlJyxcbn1cblxuLyoqXG4gKiBodHRwczovL21pY3Jvc29mdC5naXRodWIuaW8vbGFuZ3VhZ2Utc2VydmVyLXByb3RvY29sL3NwZWNpZmljYXRpb25zL3NwZWNpZmljYXRpb24tY3VycmVudC8jd29ya3NwYWNlRWRpdENsaWVudENhcGFiaWxpdGllc1xuICovXG5leHBvcnQgZW51bSBGYWlsdXJlSGFuZGxpbmdLaW5kIHtcbiAgLyoqXG4gICAqIEFwcGx5aW5nIHRoZSB3b3Jrc3BhY2UgY2hhbmdlIGlzIHNpbXBseSBhYm9ydGVkIGlmIG9uZSBvZiB0aGUgY2hhbmdlc1xuICAgKiBwcm92aWRlZCBmYWlscy5cbiAgICogQWxsIG9wZXJhdGlvbnMgZXhlY3V0ZWQgYmVmb3JlIHRoZSBmYWlsaW5nIG9wZXJhdGlvbiBzdGF5IGV4ZWN1dGVkLlxuICAgKi9cbiAgQWJvcnQgPSAnYWJvcnQnLFxuXG4gIC8qKlxuICAgKiBBbGwgb3BlcmF0aW9ucyBhcmUgZXhlY3V0ZWQgdHJhbnNhY3Rpb25hbC4gVGhhdCBtZWFucyB0aGV5IGVpdGhlciBhbGxcbiAgICogc3VjY2VlZCBvciBubyBjaGFuZ2VzIGF0IGFsbCBhcmUgYXBwbGllZCB0byB0aGUgd29ya3NwYWNlLlxuICAgKi9cbiAgVHJhbnNhY3Rpb25hbCA9ICd0cmFuc2FjdGlvbmFsJyxcblxuICAvKipcbiAgICogSWYgdGhlIHdvcmtzcGFjZSBlZGl0IGNvbnRhaW5zIG9ubHkgdGV4dHVhbCBmaWxlIGNoYW5nZXMsIHRoZXkgYXJlXG4gICAqIGV4ZWN1dGVkIHRyYW5zYWN0aW9uYWxseS5cbiAgICogSWYgcmVzb3VyY2UgY2hhbmdlcyAoY3JlYXRlLCByZW5hbWUgb3IgZGVsZXRlIGZpbGUpIGFyZSBwYXJ0IG9mIHRoZVxuICAgKiBjaGFuZ2UsIHRoZSBmYWlsdXJlIGhhbmRsaW5nIHN0cmF0ZWd5IGlzIGFib3J0LlxuICAgKi9cbiAgVGV4dE9ubHlUcmFuc2FjdGlvbmFsID0gJ3RleHRPbmx5VHJhbnNhY3Rpb25hbCcsXG5cbiAgLyoqXG4gICAqIFRoZSBjbGllbnQgdHJpZXMgdG8gdW5kbyB0aGUgb3BlcmF0aW9ucyBhbHJlYWR5IGV4ZWN1dGVkLiBCdXQgdGhlcmUgaXMgbm9cbiAgICogZ3VhcmFudGVlIHRoYXQgdGhpcyBpcyBzdWNjZWVkaW5nLlxuICAgKi9cbiAgVW5kbyA9ICd1bmRvJyxcbn1cblxuLyoqXG4gKiBodHRwczovL21pY3Jvc29mdC5naXRodWIuaW8vbGFuZ3VhZ2Utc2VydmVyLXByb3RvY29sL3NwZWNpZmljYXRpb25zL3NwZWNpZmljYXRpb24tY3VycmVudC8jZG9jdW1lbnRGaWx0ZXJcbiAqL1xuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIERvY3VtZW50RmlsdGVyIHtcbiAgLyoqXG4gICAqIEEgbGFuZ3VhZ2UgaWQsIGxpa2UgYHR5cGVzY3JpcHRgLlxuICAgKi9cbiAgbGFuZ3VhZ2U/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEEgVXJpIFtzY2hlbWVdKCNVcmkuc2NoZW1lKSwgbGlrZSBgZmlsZWAgb3IgYHVudGl0bGVkYC5cbiAgICovXG4gIHNjaGVtZT86IHN0cmluZztcblxuICAvKipcbiAgICogQSBnbG9iIHBhdHRlcm4sIGxpa2UgYCoue3RzLGpzfWAuXG4gICAqXG4gICAqIEdsb2IgcGF0dGVybnMgY2FuIGhhdmUgdGhlIGZvbGxvd2luZyBzeW50YXg6XG4gICAqIC0gYCpgIHRvIG1hdGNoIG9uZSBvciBtb3JlIGNoYXJhY3RlcnMgaW4gYSBwYXRoIHNlZ21lbnRcbiAgICogLSBgP2AgdG8gbWF0Y2ggb24gb25lIGNoYXJhY3RlciBpbiBhIHBhdGggc2VnbWVudFxuICAgKiAtIGAqKmAgdG8gbWF0Y2ggYW55IG51bWJlciBvZiBwYXRoIHNlZ21lbnRzLCBpbmNsdWRpbmcgbm9uZVxuICAgKiAtIGB7fWAgdG8gZ3JvdXAgY29uZGl0aW9uc1xuICAgKiAgIChlLmcuIGAqKuKAiy8qLnt0cyxqc31gIG1hdGNoZXMgYWxsIFR5cGVTY3JpcHQgYW5kIEphdmFTY3JpcHQgZmlsZXMpXG4gICAqIC0gYFtdYCB0byBkZWNsYXJlIGEgcmFuZ2Ugb2YgY2hhcmFjdGVycyB0byBtYXRjaCBpbiBhIHBhdGggc2VnbWVudFxuICAgKiAgIChlLmcuLCBgZXhhbXBsZS5bMC05XWAgdG8gbWF0Y2ggb24gYGV4YW1wbGUuMGAsIGBleGFtcGxlLjFgLCDigKYpXG4gICAqIC0gYFshLi4uXWAgdG8gbmVnYXRlIGEgcmFuZ2Ugb2YgY2hhcmFjdGVycyB0byBtYXRjaCBpbiBhIHBhdGggc2VnbWVudFxuICAgKiAgIChlLmcuLCBgZXhhbXBsZS5bITAtOV1gIHRvIG1hdGNoIG9uIGBleGFtcGxlLmFgLCBgZXhhbXBsZS5iYCxcbiAgICogICAgYnV0IG5vdCBgZXhhbXBsZS4wYClcbiAgICovXG4gIHBhdHRlcm4/OiBzdHJpbmc7XG59XG5cbi8qKlxuICogaHR0cHM6Ly9taWNyb3NvZnQuZ2l0aHViLmlvL2xhbmd1YWdlLXNlcnZlci1wcm90b2NvbC9zcGVjaWZpY2F0aW9ucy9zcGVjaWZpY2F0aW9uLWN1cnJlbnQvI2RvY3VtZW50RmlsdGVyXG4gKi9cbmV4cG9ydCB0eXBlIERvY3VtZW50U2VsZWN0b3IgPSBEb2N1bWVudEZpbHRlcltdO1xuXG4vKipcbiAqIFN0YXRpYyByZWdpc3RyYXRpb24gb3B0aW9ucyB0byBiZSByZXR1cm5lZCBpbiB0aGUgaW5pdGlhbGl6ZSByZXF1ZXN0LlxuICovXG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgU3RhdGljUmVnaXN0cmF0aW9uT3B0aW9ucyB7XG4gIC8qKlxuICAgKiBUaGUgaWQgdXNlZCB0byByZWdpc3RlciB0aGUgcmVxdWVzdC4gVGhlIGlkIGNhbiBiZSB1c2VkIHRvIGRlcmVnaXN0ZXJcbiAgICogdGhlIHJlcXVlc3QgYWdhaW4uIFNlZSBhbHNvIFJlZ2lzdHJhdGlvbiNpZC5cbiAgICovXG4gIGlkPzogc3RyaW5nO1xufVxuXG4vKipcbiAqIEdlbmVyYWwgdGV4dCBkb2N1bWVudCByZWdpc3RyYXRpb24gb3B0aW9ucy5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIFRleHREb2N1bWVudFJlZ2lzdHJhdGlvbk9wdGlvbnMge1xuICAvKipcbiAgICogQSBkb2N1bWVudCBzZWxlY3RvciB0byBpZGVudGlmeSB0aGUgc2NvcGUgb2YgdGhlIHJlZ2lzdHJhdGlvbi5cbiAgICogSWYgc2V0IHRvIG51bGwsIHRoZSBkb2N1bWVudCBzZWxlY3RvciBwcm92aWRlZCBvbiB0aGUgY2xpZW50IHNpZGVcbiAgICogd2lsbCBiZSB1c2VkLlxuICAgKi9cbiAgZG9jdW1lbnRTZWxlY3RvcjogRG9jdW1lbnRTZWxlY3RvciB8IG51bGw7XG59XG5cbi8qKlxuICogaHR0cHM6Ly9taWNyb3NvZnQuZ2l0aHViLmlvL2xhbmd1YWdlLXNlcnZlci1wcm90b2NvbC9zcGVjaWZpY2F0aW9ucy9zcGVjaWZpY2F0aW9uLWN1cnJlbnQvI2luaXRpYXRpbmdXb3JrRG9uZVByb2dyZXNzXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBXb3JrRG9uZVByb2dyZXNzUGFyYW1zIHtcbiAgLyoqXG4gICAqIEFuIG9wdGlvbmFsIHRva2VuIHRoYXQgYSBzZXJ2ZXIgY2FuIHVzZSB0byByZXBvcnQgd29yayBkb25lIHByb2dyZXNzLlxuICAgKi9cbiAgd29ya0RvbmVUb2tlbj86IFByb2dyZXNzVG9rZW47XG59XG5cbi8qKlxuICogVGhlIGRpYWdub3N0aWMgdGFncy5cbiAqXG4gKiBAc2luY2UgMy4xNS4wXG4gKi9cbmV4cG9ydCBlbnVtIERpYWdub3N0aWNUYWcge1xuICAvKipcbiAgICogVW51c2VkIG9yIHVubmVjZXNzYXJ5IGNvZGUuXG4gICAqXG4gICAqIENsaWVudHMgYXJlIGFsbG93ZWQgdG8gcmVuZGVyIGRpYWdub3N0aWNzIHdpdGggdGhpcyB0YWcgZmFkZWQgb3V0XG4gICAqIGluc3RlYWQgb2YgaGF2aW5nIGFuIGVycm9yIHNxdWlnZ2xlLlxuICAgKi9cbiAgVW5uZWNlc3NhcnkgPSAxLFxuICAvKipcbiAgICogRGVwcmVjYXRlZCBvciBvYnNvbGV0ZSBjb2RlLlxuICAgKlxuICAgKiBDbGllbnRzIGFyZSBhbGxvd2VkIHRvIHJlbmRlcmVkIGRpYWdub3N0aWNzIHdpdGggdGhpcyB0YWcgc3RyaWtlIHRocm91Z2guXG4gICAqL1xuICBEZXByZWNhdGVkID0gMixcbn1cblxuLyoqXG4gKiBodHRwczovL21pY3Jvc29mdC5naXRodWIuaW8vbGFuZ3VhZ2Utc2VydmVyLXByb3RvY29sL3NwZWNpZmljYXRpb25zL3NwZWNpZmljYXRpb24tY3VycmVudC8jZGlhZ25vc3RpY1xuICovXG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgRGlhZ25vc3RpYyB7XG4gIC8qKlxuICAgKiBUaGUgcmFuZ2UgYXQgd2hpY2ggdGhlIG1lc3NhZ2UgYXBwbGllcy5cbiAgICovXG4gIHJhbmdlOiBSYW5nZTtcblxuICAvKipcbiAgICogVGhlIGRpYWdub3N0aWMncyBzZXZlcml0eS4gQ2FuIGJlIG9taXR0ZWQuIElmIG9taXR0ZWQgaXQgaXMgdXAgdG8gdGhlXG4gICAqIGNsaWVudCB0byBpbnRlcnByZXQgZGlhZ25vc3RpY3MgYXMgZXJyb3IsIHdhcm5pbmcsIGluZm8gb3IgaGludC5cbiAgICovXG4gIHNldmVyaXR5PzogRGlhZ25vc3RpY1NldmVyaXR5O1xuXG4gIC8qKlxuICAgKiBUaGUgZGlhZ25vc3RpYydzIGNvZGUsIHdoaWNoIG1pZ2h0IGFwcGVhciBpbiB0aGUgdXNlciBpbnRlcmZhY2UuXG4gICAqL1xuICBjb2RlPzogbnVtYmVyIHwgc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBBIGh1bWFuLXJlYWRhYmxlIHN0cmluZyBkZXNjcmliaW5nIHRoZSBzb3VyY2Ugb2YgdGhpc1xuICAgKiBkaWFnbm9zdGljLCBlLmcuICd0eXBlc2NyaXB0JyBvciAnc3VwZXIgbGludCcuXG4gICAqL1xuICBzb3VyY2U/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBkaWFnbm9zdGljJ3MgbWVzc2FnZS5cbiAgICovXG4gIG1lc3NhZ2U6IHN0cmluZztcblxuICAvKipcbiAgICogQWRkaXRpb25hbCBtZXRhZGF0YSBhYm91dCB0aGUgZGlhZ25vc3RpYy5cbiAgICpcbiAgICogQHNpbmNlIDMuMTUuMFxuICAgKi9cbiAgdGFncz86IERpYWdub3N0aWNUYWdbXTtcblxuICAvKipcbiAgICogQW4gYXJyYXkgb2YgcmVsYXRlZCBkaWFnbm9zdGljIGluZm9ybWF0aW9uLCBlLmcuIHdoZW4gc3ltYm9sLW5hbWVzIHdpdGhpblxuICAgKiBhIHNjb3BlIGNvbGxpZGUgYWxsIGRlZmluaXRpb25zIGNhbiBiZSBtYXJrZWQgdmlhIHRoaXMgcHJvcGVydHkuXG4gICAqL1xuICByZWxhdGVkSW5mb3JtYXRpb24/OiBEaWFnbm9zdGljUmVsYXRlZEluZm9ybWF0aW9uW107XG59XG5cbi8qKlxuICogaHR0cHM6Ly9taWNyb3NvZnQuZ2l0aHViLmlvL2xhbmd1YWdlLXNlcnZlci1wcm90b2NvbC9zcGVjaWZpY2F0aW9ucy9zcGVjaWZpY2F0aW9uLWN1cnJlbnQvI2RpYWdub3N0aWNcbiAqL1xuZXhwb3J0IGVudW0gRGlhZ25vc3RpY1NldmVyaXR5IHtcbiAgLyoqXG4gICAqIFJlcG9ydHMgYW4gZXJyb3IuXG4gICAqL1xuICBFcnJvciA9IDEsXG4gIC8qKlxuICAgKiBSZXBvcnRzIGEgd2FybmluZy5cbiAgICovXG4gIFdhcm5pbmcgPSAyLFxuICAvKipcbiAgICogUmVwb3J0cyBhbiBpbmZvcm1hdGlvbi5cbiAgICovXG4gIEluZm9ybWF0aW9uID0gMyxcbiAgLyoqXG4gICAqIFJlcG9ydHMgYSBoaW50LlxuICAgKi9cbiAgSGludCA9IDQsXG59XG5cbi8qKlxuICogUmVwcmVzZW50cyBhIHJlbGF0ZWQgbWVzc2FnZSBhbmQgc291cmNlIGNvZGUgbG9jYXRpb24gZm9yIGEgZGlhZ25vc3RpYy5cbiAqIFRoaXMgc2hvdWxkIGJlIHVzZWQgdG8gcG9pbnQgdG8gY29kZSBsb2NhdGlvbnMgdGhhdCBjYXVzZSBvciBhcmUgcmVsYXRlZFxuICogdG8gYSBkaWFnbm9zdGljcywgZm9yIGV4YW1wbGUsIHdoZW4gZHVwbGljYXRpbmcgYSBzeW1ib2wgaW4gYSBzY29wZS5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIERpYWdub3N0aWNSZWxhdGVkSW5mb3JtYXRpb24ge1xuICAvKipcbiAgICogVGhlIGxvY2F0aW9uIG9mIHRoaXMgcmVsYXRlZCBkaWFnbm9zdGljIGluZm9ybWF0aW9uLlxuICAgKi9cbiAgbG9jYXRpb246IExvY2F0aW9uO1xuXG4gIC8qKlxuICAgKiBUaGUgbWVzc2FnZSBvZiB0aGlzIHJlbGF0ZWQgZGlhZ25vc3RpYyBpbmZvcm1hdGlvbi5cbiAgICovXG4gIG1lc3NhZ2U6IHN0cmluZztcbn1cblxuLyoqXG4gKiBBIHN5bWJvbCBraW5kLlxuICovXG5leHBvcnQgZW51bSBTeW1ib2xLaW5kIHtcbiAgRmlsZSA9IDEsXG4gIE1vZHVsZSA9IDIsXG4gIE5hbWVzcGFjZSA9IDMsXG4gIFBhY2thZ2UgPSA0LFxuICBDbGFzcyA9IDUsXG4gIE1ldGhvZCA9IDYsXG4gIFByb3BlcnR5ID0gNyxcbiAgRmllbGQgPSA4LFxuICBDb25zdHJ1Y3RvciA9IDksXG4gIEVudW0gPSAxMCxcbiAgSW50ZXJmYWNlID0gMTEsXG4gIEZ1bmN0aW9uID0gMTIsXG4gIFZhcmlhYmxlID0gMTMsXG4gIENvbnN0YW50ID0gMTQsXG4gIFN0cmluZyA9IDE1LFxuICBOdW1iZXIgPSAxNixcbiAgQm9vbGVhbiA9IDE3LFxuICBBcnJheSA9IDE4LFxuICBPYmplY3QgPSAxOSxcbiAgS2V5ID0gMjAsXG4gIE51bGwgPSAyMSxcbiAgRW51bU1lbWJlciA9IDIyLFxuICBTdHJ1Y3QgPSAyMyxcbiAgRXZlbnQgPSAyNCxcbiAgT3BlcmF0b3IgPSAyNSxcbiAgVHlwZVBhcmFtZXRlciA9IDI2LFxufVxuXG4vKipcbiAqIFN5bWJvbCB0YWdzIGFyZSBleHRyYSBhbm5vdGF0aW9ucyB0aGF0IHR3ZWFrIHRoZSByZW5kZXJpbmcgb2YgYSBzeW1ib2wuXG4gKlxuICogQHNpbmNlIDMuMTZcbiAqL1xuZXhwb3J0IGVudW0gU3ltYm9sVGFnIHtcblxuICAvKipcbiAgICogUmVuZGVyIGEgc3ltYm9sIGFzIG9ic29sZXRlLCB1c3VhbGx5IHVzaW5nIGEgc3RyaWtlLW91dC5cbiAgICovXG4gIERlcHJlY2F0ZWQgPSAxLFxufVxuXG4vKipcbiAqIGh0dHBzOi8vbWljcm9zb2Z0LmdpdGh1Yi5pby9sYW5ndWFnZS1zZXJ2ZXItcHJvdG9jb2wvc3BlY2lmaWNhdGlvbnMvc3BlY2lmaWNhdGlvbi1jdXJyZW50LyN3b3Jrc3BhY2VfZXhlY3V0ZUNvbW1hbmRcbiAqL1xuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIEV4ZWN1dGVDb21tYW5kQ2xpZW50Q2FwYWJpbGl0aWVzIHtcbiAgLyoqXG4gICAqIEV4ZWN1dGUgY29tbWFuZCBzdXBwb3J0cyBkeW5hbWljIHJlZ2lzdHJhdGlvbi5cbiAgICovXG4gIGR5bmFtaWNSZWdpc3RyYXRpb24/OiBib29sZWFuO1xufVxuXG4vKipcbiAqIGh0dHBzOi8vbWljcm9zb2Z0LmdpdGh1Yi5pby9sYW5ndWFnZS1zZXJ2ZXItcHJvdG9jb2wvc3BlY2lmaWNhdGlvbnMvc3BlY2lmaWNhdGlvbi1jdXJyZW50LyNwYXJ0aWFsUmVzdWx0UGFyYW1zXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBQYXJ0aWFsUmVzdWx0UGFyYW1zIHtcbiAgLyoqXG4gICAqIEFuIG9wdGlvbmFsIHRva2VuIHRoYXQgYSBzZXJ2ZXIgY2FuIHVzZSB0byByZXBvcnQgcGFydGlhbCByZXN1bHRzIChlLmcuXG4gICAqIHN0cmVhbWluZykgdG8gdGhlIGNsaWVudC5cbiAgICovXG4gIHBhcnRpYWxSZXN1bHRUb2tlbj86IFByb2dyZXNzVG9rZW47XG59XG5cbi8qKlxuICogRGVmaW5lcyBhbiBpbnRlZ2VyIG51bWJlciBpbiB0aGUgcmFuZ2Ugb2YgLTJeMzEgdG8gMl4zMSAtIDEuXG4gKi9cbmV4cG9ydCB0eXBlIGludGVnZXIgPSBudW1iZXI7XG4vKipcbiAqIERlZmluZXMgYW4gdW5zaWduZWQgaW50ZWdlciBudW1iZXIgaW4gdGhlIHJhbmdlIG9mIDAgdG8gMl4zMSAtIDEuXG4gKi9cbmV4cG9ydCB0eXBlIHVpbnRlZ2VyID0gbnVtYmVyO1xuLyoqXG4gKiBEZWZpbmVzIGEgZGVjaW1hbCBudW1iZXIuIFNpbmNlIGRlY2ltYWwgbnVtYmVycyBhcmUgdmVyeVxuICogcmFyZSBpbiB0aGUgbGFuZ3VhZ2Ugc2VydmVyIHNwZWNpZmljYXRpb24gd2UgZGVub3RlIHRoZVxuICogZXhhY3QgcmFuZ2Ugd2l0aCBldmVyeSBkZWNpbWFsIHVzaW5nIHRoZSBtYXRoZW1hdGljc1xuICogaW50ZXJ2YWwgbm90YXRpb24gKGUuZy4gWzAsIDFdIGRlbm90ZXMgYWxsIGRlY2ltYWxzIGQgd2l0aFxuICogMCA8PSBkIDw9IDEuXG4gKi9cbmV4cG9ydCB0eXBlIGRlY2ltYWwgPSBudW1iZXI7XG5cbi8qKlxuICogaHR0cHM6Ly9taWNyb3NvZnQuZ2l0aHViLmlvL2xhbmd1YWdlLXNlcnZlci1wcm90b2NvbC9zcGVjaWZpY2F0aW9ucy9zcGVjaWZpY2F0aW9uLWN1cnJlbnQvI2luaXRpYWxpemVkXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSW5pdGlhbGl6ZWQgZXh0ZW5kcyBOb3RpZmljYXRpb25NZXNzYWdlPEluaXRpYWxpemVkUGFyYW1zPiB7XG4gIG1ldGhvZDogTWV0aG9kLkluaXRpYWxpemVkO1xufVxuXG4vKipcbiAqIGh0dHBzOi8vbWljcm9zb2Z0LmdpdGh1Yi5pby9sYW5ndWFnZS1zZXJ2ZXItcHJvdG9jb2wvc3BlY2lmaWNhdGlvbnMvc3BlY2lmaWNhdGlvbi1jdXJyZW50LyNpbml0aWFsaXplZFxuICovXG5leHBvcnQgaW50ZXJmYWNlIEluaXRpYWxpemVkUGFyYW1zIHtcbn1cblxuLyoqXG4gKiBHZW5lcmFsIHBhcmFtZXRlcnMgdG8gcmVnaXN0ZXIgZm9yIGEgY2FwYWJpbGl0eS5cbiAqIGh0dHBzOi8vbWljcm9zb2Z0LmdpdGh1Yi5pby9sYW5ndWFnZS1zZXJ2ZXItcHJvdG9jb2wvc3BlY2lmaWNhdGlvbnMvc3BlY2lmaWNhdGlvbi1jdXJyZW50LyNjbGllbnRfcmVnaXN0ZXJDYXBhYmlsaXR5XG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUmVnaXN0cmF0aW9uIHtcbiAgLyoqXG4gICAqIFRoZSBpZCB1c2VkIHRvIHJlZ2lzdGVyIHRoZSByZXF1ZXN0LiBUaGUgaWQgY2FuIGJlIHVzZWQgdG8gZGVyZWdpc3RlclxuICAgKiB0aGUgcmVxdWVzdCBhZ2Fpbi5cbiAgICovXG4gIGlkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBtZXRob2QgLyBjYXBhYmlsaXR5IHRvIHJlZ2lzdGVyIGZvci5cbiAgICovXG4gIG1ldGhvZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBPcHRpb25zIG5lY2Vzc2FyeSBmb3IgdGhlIHJlZ2lzdHJhdGlvbi5cbiAgICovXG4gIHJlZ2lzdGVyT3B0aW9ucz86IHVua25vd247XG59XG5cbi8qKlxuICogaHR0cHM6Ly9taWNyb3NvZnQuZ2l0aHViLmlvL2xhbmd1YWdlLXNlcnZlci1wcm90b2NvbC9zcGVjaWZpY2F0aW9ucy9zcGVjaWZpY2F0aW9uLWN1cnJlbnQvI2NsaWVudF9yZWdpc3RlckNhcGFiaWxpdHlcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSZWdpc3RyYXRpb25QYXJhbXMge1xuICByZWdpc3RyYXRpb25zOiBSZWdpc3RyYXRpb25bXTtcbn1cbiJdfQ==