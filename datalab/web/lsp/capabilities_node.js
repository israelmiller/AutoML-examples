"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FwYWJpbGl0aWVzX25vZGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9nZW5maWxlcy90aGlyZF9wYXJ0eS9jb2xhYi9zb3VyY2VzL2xzcC9jYXBhYmlsaXRpZXNfbm9kZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgdGV4dERvY3VtZW50IGZyb20gJy4vdGV4dF9kb2N1bWVudF9ub2RlJztcbmltcG9ydCAqIGFzIHdvcmtzcGFjZSBmcm9tICcuL3dvcmtzcGFjZV9ub2RlJztcbmltcG9ydCAqIGFzIHByb3RvY29sIGZyb20gJy4vcHJvdG9jb2xfbm9kZSc7XG5cbmludGVyZmFjZSBDbGllbnRDYXBhYmlsaXRpZXMge1xuICAvKipcbiAgICogV29ya3NwYWNlIHNwZWNpZmljIGNsaWVudCBjYXBhYmlsaXRpZXMuXG4gICAqL1xuICB3b3Jrc3BhY2U/OiB7XG4gICAgLyoqXG4gICAgICogVGhlIGNsaWVudCBzdXBwb3J0cyBhcHBseWluZyBiYXRjaCBlZGl0c1xuICAgICAqIHRvIHRoZSB3b3Jrc3BhY2UgYnkgc3VwcG9ydGluZyB0aGUgcmVxdWVzdFxuICAgICAqICd3b3Jrc3BhY2UvYXBwbHlFZGl0J1xuICAgICAqL1xuICAgIGFwcGx5RWRpdD86IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBDYXBhYmlsaXRpZXMgc3BlY2lmaWMgdG8gYFdvcmtzcGFjZUVkaXRgc1xuICAgICAqL1xuICAgIHdvcmtzcGFjZUVkaXQ/OiBwcm90b2NvbC5Xb3Jrc3BhY2VFZGl0Q2xpZW50Q2FwYWJpbGl0aWVzO1xuXG4gICAgLyoqXG4gICAgICogQ2FwYWJpbGl0aWVzIHNwZWNpZmljIHRvIHRoZSBgd29ya3NwYWNlL2RpZENoYW5nZUNvbmZpZ3VyYXRpb25gXG4gICAgICogbm90aWZpY2F0aW9uLlxuICAgICAqL1xuICAgIGRpZENoYW5nZUNvbmZpZ3VyYXRpb24/OiB3b3Jrc3BhY2UuRGlkQ2hhbmdlQ29uZmlndXJhdGlvbkNsaWVudENhcGFiaWxpdGllcztcblxuICAgIC8qKlxuICAgICAqIENhcGFiaWxpdGllcyBzcGVjaWZpYyB0byB0aGUgYHdvcmtzcGFjZS9kaWRDaGFuZ2VXYXRjaGVkRmlsZXNgXG4gICAgICogbm90aWZpY2F0aW9uLlxuICAgICAqL1xuICAgIGRpZENoYW5nZVdhdGNoZWRGaWxlcz86IHdvcmtzcGFjZS5EaWRDaGFuZ2VXYXRjaGVkRmlsZXNDbGllbnRDYXBhYmlsaXRpZXM7XG5cbiAgICAvKipcbiAgICAgKiBDYXBhYmlsaXRpZXMgc3BlY2lmaWMgdG8gdGhlIGB3b3Jrc3BhY2Uvc3ltYm9sYCByZXF1ZXN0LlxuICAgICAqL1xuICAgIHN5bWJvbD86IHdvcmtzcGFjZS5Xb3Jrc3BhY2VTeW1ib2xDbGllbnRDYXBhYmlsaXRpZXM7XG5cbiAgICAvKipcbiAgICAgKiBDYXBhYmlsaXRpZXMgc3BlY2lmaWMgdG8gdGhlIGB3b3Jrc3BhY2UvZXhlY3V0ZUNvbW1hbmRgIHJlcXVlc3QuXG4gICAgICovXG4gICAgZXhlY3V0ZUNvbW1hbmQ/OiBwcm90b2NvbC5FeGVjdXRlQ29tbWFuZENsaWVudENhcGFiaWxpdGllcztcblxuICAgIC8qKlxuICAgICAqIFRoZSBjbGllbnQgaGFzIHN1cHBvcnQgZm9yIHdvcmtzcGFjZSBmb2xkZXJzLlxuICAgICAqXG4gICAgICogU2luY2UgMy42LjBcbiAgICAgKi9cbiAgICB3b3Jrc3BhY2VGb2xkZXJzPzogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIFRoZSBjbGllbnQgc3VwcG9ydHMgYHdvcmtzcGFjZS9jb25maWd1cmF0aW9uYCByZXF1ZXN0cy5cbiAgICAgKlxuICAgICAqIFNpbmNlIDMuNi4wXG4gICAgICovXG4gICAgY29uZmlndXJhdGlvbj86IGJvb2xlYW47XG4gIH07XG5cbiAgLyoqXG4gICAqIFRleHQgZG9jdW1lbnQgc3BlY2lmaWMgY2xpZW50IGNhcGFiaWxpdGllcy5cbiAgICovXG4gIHRleHREb2N1bWVudD86IHRleHREb2N1bWVudC5UZXh0RG9jdW1lbnRDbGllbnRDYXBhYmlsaXRpZXM7XG5cbiAgLyoqXG4gICAqIFdpbmRvdyBzcGVjaWZpYyBjbGllbnQgY2FwYWJpbGl0aWVzLlxuICAgKi9cbiAgd2luZG93Pzoge1xuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgY2xpZW50IHN1cHBvcnRzIGhhbmRsaW5nIHByb2dyZXNzIG5vdGlmaWNhdGlvbnMuXG4gICAgICogSWYgc2V0LCBzZXJ2ZXJzIGFyZSBhbGxvd2VkIHRvIHJlcG9ydCBpbiBgd29ya0RvbmVQcm9ncmVzc2AgcHJvcGVydHlcbiAgICAgKiBpbiB0aGUgcmVxdWVzdCBzcGVjaWZpYyBzZXJ2ZXIgY2FwYWJpbGl0aWVzLlxuICAgICAqXG4gICAgICogU2luY2UgMy4xNS4wXG4gICAgICovXG4gICAgd29ya0RvbmVQcm9ncmVzcz86IGJvb2xlYW47XG4gIH07XG5cbiAgLyoqXG4gICAqIEV4cGVyaW1lbnRhbCBjbGllbnQgY2FwYWJpbGl0aWVzLlxuICAgKi9cbiAgZXhwZXJpbWVudGFsPzogdW5rbm93bjtcbn1cblxuLyoqXG4gKiBodHRwczovL21pY3Jvc29mdC5naXRodWIuaW8vbGFuZ3VhZ2Utc2VydmVyLXByb3RvY29sL3NwZWNpZmljYXRpb25zL3NwZWNpZmljYXRpb24tY3VycmVudC8jaW5pdGlhbGl6ZVxuICovXG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgSW5pdGlhbGl6ZSBleHRlbmRzIHByb3RvY29sLlJlcXVlc3RNZXNzYWdlPEluaXRpYWxpemVQYXJhbXM+IHtcbiAgbWV0aG9kOiBwcm90b2NvbC5NZXRob2QuSW5pdGlhbGl6ZTtcbn1cblxuLyoqXG4gKiBodHRwczovL21pY3Jvc29mdC5naXRodWIuaW8vbGFuZ3VhZ2Utc2VydmVyLXByb3RvY29sL3NwZWNpZmljYXRpb25zL3NwZWNpZmljYXRpb24tY3VycmVudC8jaW5pdGlhbGl6ZVxuICovXG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgSW5pdGlhbGl6ZVBhcmFtcyBleHRlbmRzIHByb3RvY29sLldvcmtEb25lUHJvZ3Jlc3NQYXJhbXMge1xuICAvKipcbiAgICogVGhlIHByb2Nlc3MgSUQgb2YgdGhlIHBhcmVudCBwcm9jZXNzIHRoYXQgc3RhcnRlZCB0aGUgc2VydmVyLlxuICAgKiBJcyBudWxsIGlmIHRoZSBwcm9jZXNzIGhhcyBub3QgYmVlbiBzdGFydGVkIGJ5IGFub3RoZXIgcHJvY2Vzcy5cbiAgICogSWYgdGhlIHBhcmVudCBwcm9jZXNzIGlzIG5vdCBhbGl2ZSwgdGhlbiB0aGUgc2VydmVyIHNob3VsZCBleGl0XG4gICAqIChzZWUgZXhpdCBub3RpZmljYXRpb24pIGl0cyBwcm9jZXNzLlxuICAgKi9cbiAgcHJvY2Vzc0lkOiBudW1iZXIgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBJbmZvcm1hdGlvbiBhYm91dCB0aGUgY2xpZW50XG4gICAqXG4gICAqIEBzaW5jZSAzLjE1LjBcbiAgICovXG4gIGNsaWVudEluZm8/OiB7XG4gICAgLyoqXG4gICAgICogVGhlIG5hbWUgb2YgdGhlIGNsaWVudCBhcyBkZWZpbmVkIGJ5IHRoZSBjbGllbnQuXG4gICAgICovXG4gICAgbmFtZTogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGNsaWVudCdzIHZlcnNpb24gYXMgZGVmaW5lZCBieSB0aGUgY2xpZW50LlxuICAgICAqL1xuICAgIHZlcnNpb24/OiBzdHJpbmc7XG4gIH07XG5cbiAgLyoqXG4gICAqIFRoZSByb290UGF0aCBvZiB0aGUgd29ya3NwYWNlLiBJcyBudWxsXG4gICAqIGlmIG5vIGZvbGRlciBpcyBvcGVuLlxuICAgKlxuICAgKiBAZGVwcmVjYXRlZCBpbiBmYXZvdXIgb2Ygcm9vdFVyaS5cbiAgICovXG4gIHJvb3RQYXRoPzogc3RyaW5nIHwgbnVsbDtcblxuICAvKipcbiAgICogVGhlIHJvb3RVcmkgb2YgdGhlIHdvcmtzcGFjZS4gSXMgbnVsbCBpZiBub1xuICAgKiBmb2xkZXIgaXMgb3Blbi4gSWYgYm90aCBgcm9vdFBhdGhgIGFuZCBgcm9vdFVyaWAgYXJlIHNldFxuICAgKiBgcm9vdFVyaWAgd2lucy5cbiAgICovXG4gIHJvb3RVcmk6IHByb3RvY29sLkRvY3VtZW50VXJpIHwgbnVsbDtcblxuICAvKipcbiAgICogVXNlciBwcm92aWRlZCBpbml0aWFsaXphdGlvbiBvcHRpb25zLlxuICAgKi9cbiAgaW5pdGlhbGl6YXRpb25PcHRpb25zPzogdW5rbm93bjtcblxuICAvKipcbiAgICogVGhlIGNhcGFiaWxpdGllcyBwcm92aWRlZCBieSB0aGUgY2xpZW50IChlZGl0b3Igb3IgdG9vbClcbiAgICovXG4gIGNhcGFiaWxpdGllczogQ2xpZW50Q2FwYWJpbGl0aWVzO1xuXG4gIC8qKlxuICAgKiBUaGUgaW5pdGlhbCB0cmFjZSBzZXR0aW5nLiBJZiBvbWl0dGVkIHRyYWNlIGlzIGRpc2FibGVkICgnb2ZmJykuXG4gICAqL1xuICB0cmFjZT86ICdvZmYnIHwgJ21lc3NhZ2VzJyB8ICd2ZXJib3NlJztcblxuICAvKipcbiAgICogVGhlIHdvcmtzcGFjZSBmb2xkZXJzIGNvbmZpZ3VyZWQgaW4gdGhlIGNsaWVudCB3aGVuIHRoZSBzZXJ2ZXIgc3RhcnRzLlxuICAgKiBUaGlzIHByb3BlcnR5IGlzIG9ubHkgYXZhaWxhYmxlIGlmIHRoZSBjbGllbnQgc3VwcG9ydHMgd29ya3NwYWNlIGZvbGRlcnMuXG4gICAqIEl0IGNhbiBiZSBgbnVsbGAgaWYgdGhlIGNsaWVudCBzdXBwb3J0cyB3b3Jrc3BhY2UgZm9sZGVycyBidXQgbm9uZSBhcmVcbiAgICogY29uZmlndXJlZC5cbiAgICpcbiAgICogQHNpbmNlIDMuNi4wXG4gICAqL1xuICB3b3Jrc3BhY2VGb2xkZXJzPzogd29ya3NwYWNlLldvcmtzcGFjZUZvbGRlcltdIHwgbnVsbDtcbn1cbiJdfQ==