"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileChangeType = exports.WatchKind = void 0;
/**
 * See:
 * https://microsoft.github.io/language-server-protocol/specification#workspace_didChangeWatchedFiles
 */
var WatchKind;
(function (WatchKind) {
    /**
     * Interested in create events.
     */
    WatchKind[WatchKind["Create"] = 1] = "Create";
    /**
     * Interested in change events
     */
    WatchKind[WatchKind["Change"] = 2] = "Change";
    /**
     * Interested in delete events
     */
    WatchKind[WatchKind["Delete"] = 4] = "Delete";
})(WatchKind = exports.WatchKind || (exports.WatchKind = {}));
/**
 * The file event type.
 */
var FileChangeType;
(function (FileChangeType) {
    /**
     * The file got created.
     */
    FileChangeType[FileChangeType["Created"] = 1] = "Created";
    /**
     * The file got changed.
     */
    FileChangeType[FileChangeType["Changed"] = 2] = "Changed";
    /**
     * The file got deleted.
     */
    FileChangeType[FileChangeType["Deleted"] = 3] = "Deleted";
})(FileChangeType = exports.FileChangeType || (exports.FileChangeType = {}));
//# sourceMappingURL=data:application/json;base64,